#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <definition.h>
#include <math.h>
#include <SC.h>

using namespace std;

int main(int argc,char** argv){
    SC sc;
    srand(time(NULL));
    cout<<"program in"<<endl;
    bool all_one[bit_len];
    bool all_zero[bit_len];

    vector<bool*> sum;
    bool* stream1;
    bool* stream2;
    bool* stream3;
    sum.clear();
    stream2 = sc.bit_gen(0.3);
    stream1 = sc.bit_gen(0.2);
    stream3 = sc.bit_gen(0.4);
    sum.push_back(stream2);
    sum.push_back(stream1);
    sum.push_back(stream3);
    cout<<"bello!! : ";
    cout<<sc.print(sc.MUX_general(sum))<<endl;

    bool* x;
    double answer1 = 0,answer2 = 0;
    // x = sc.bit_gen(0.1); 
    float prop = 0;
    float best_prop = 10000;
    float best_tmp;
    int n = 5;
    float tmp = 0;
    // for(int j=0; j<100; j++){
    //     tmp = 0.25 + 0.3*j/100;
    //     for(size_t i=0; i<100; i++){
    //         x = sc.bit_gen(0.1); 
    //         prop += abs(sc.print(sc.lin_gain(x,n,tmp)) - (sc.print(x)*n) )/(sc.print(x)*n) * 100;
    //         // cout << abs(sc.print(sc.lin_gain(x,n,tmp)) - (sc.print(x)*n) )/(sc.print(x)*n) * 100 << "%" << "\n";
    //     }
    //     cout << "tmp: " << tmp << "  prop:"  << prop/100 << "%" << "\n";
    //     if(prop < best_prop){
    //         best_prop = prop;
    //         best_tmp = tmp;
    //     }
    //     prop = 0;
       
    // }
    //  cout << "best_tmp: " << best_tmp << "  best_prop:"  << best_prop/100 << "%" << "\n";

   double weight_1[30][4] = {{1.0,1.0,-1.0,-1.0},{-1.0,-1.0,1.0,1.0},{1.0,1.0,1.0,-1.0},{-1.0,-1.0,1.0,1.0},{1.0,1.0,-1.0,-1.0},
{1.0,1.0,1.0,1.0},{-1.0,1.0,-1.0,-1.0},{-1.0,-1.0,-1.0,-1.0},{-1.0,1.0,-1.0,-1.0},{-1.0,-1.0,1.0,1.0},{-1.0,-1.0,1.0,1.0},{1.0,1.0,-1.0,-1.0},{-1.0,-1.0,1.0,1.0},
{-1.0,-1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,-1.0,-1.0},{1.0,1.0,-1.0,-1.0},{-1.0,-1.0,1.0,1.0},{1.0,1.0,-1.0,-1.0},{-1.0,-1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{-1.0,-1.0,1.0,1.0},
{-1.0,-1.0,1.0,1.0},{1.0,1.0,-1.0,-1.0},{1.0,1.0,-1.0,-1.0},{1.0,1.0,-1.0,-1.0},
{-1.0,-1.0,1.0,1.0},{-1.0,-1.0,1.0,1.0},{1.0,1.0,-1.0,-1.0},{-1.0,1.0,-1.0,-1.0}};
    double weight_2[3][30] = {{1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,1.0},
{1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0},
{-1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0}};
    double x_test[30][4] = {{6.1000, 2.8000, 4.7000, 1.2000},
        {5.7000, 3.8000, 1.7000, 0.3000},
        {7.7000, 2.6000, 6.9000, 2.3000},
        {6.0000, 2.9000, 4.5000, 1.5000},
        {6.8000, 2.8000, 4.8000, 1.4000},
        {5.4000, 3.4000, 1.5000, 0.4000},
        {5.6000, 2.9000, 3.6000, 1.3000},
        {6.9000, 3.1000, 5.1000, 2.3000},
        {6.2000, 2.2000, 4.5000, 1.5000},
        {5.8000, 2.7000, 3.9000, 1.2000},
        {6.5000, 3.2000, 5.1000, 2.0000},
        {4.8000, 3.0000, 1.4000, 0.1000},
        {5.5000, 3.5000, 1.3000, 0.2000},
        {4.9000, 3.1000, 1.5000, 0.1000},
        {5.1000, 3.8000, 1.5000, 0.3000},
        {6.3000, 3.3000, 4.7000, 1.6000},
        {6.5000, 3.0000, 5.8000, 2.2000},
        {5.6000, 2.5000, 3.9000, 1.1000},
        {5.7000, 2.8000, 4.5000, 1.3000},
        {6.4000, 2.8000, 5.6000, 2.2000},
        {4.7000, 3.2000, 1.6000, 0.2000},
        {6.1000, 3.0000, 4.9000, 1.8000},
        {5.0000, 3.4000, 1.6000, 0.4000},
        {6.4000, 2.8000, 5.6000, 2.1000},
        {7.9000, 3.8000, 6.4000, 2.0000},
        {6.7000, 3.0000, 5.2000, 2.3000},
        {6.7000, 2.5000, 5.8000, 1.8000},
        {6.8000, 3.2000, 5.9000, 2.3000},
        {4.8000, 3.0000, 1.4000, 0.3000},
        {4.8000, 3.1000, 1.6000, 0.2000}};
    float corr_answer[30] = {1, 0, 2, 1, 1, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 0, 2, 0, 2,
        2, 2, 2, 2, 0, 0};
    
    double train_data[120][4] {{4.6000, 3.6000, 1.0000, 0.2000},
        {5.7000, 4.4000, 1.5000, 0.4000},
        {6.7000, 3.1000, 4.4000, 1.4000},
        {4.8000, 3.4000, 1.6000, 0.2000},
        {4.4000, 3.2000, 1.3000, 0.2000},
        {6.3000, 2.5000, 5.0000, 1.9000},
        {6.4000, 3.2000, 4.5000, 1.5000},
        {5.2000, 3.5000, 1.5000, 0.2000},
        {5.0000, 3.6000, 1.4000, 0.2000},
        {5.2000, 4.1000, 1.5000, 0.1000},
        {5.8000, 2.7000, 5.1000, 1.9000},
        {6.0000, 3.4000, 4.5000, 1.6000},
        {6.7000, 3.1000, 4.7000, 1.5000},
        {5.4000, 3.9000, 1.3000, 0.4000},
        {5.4000, 3.7000, 1.5000, 0.2000},
        {5.5000, 2.4000, 3.7000, 1.0000},
        {6.3000, 2.8000, 5.1000, 1.5000},
        {6.4000, 3.1000, 5.5000, 1.8000},
        {6.6000, 3.0000, 4.4000, 1.4000},
        {7.2000, 3.6000, 6.1000, 2.5000},
        {5.7000, 2.9000, 4.2000, 1.3000},
        {7.6000, 3.0000, 6.6000, 2.1000},
        {5.6000, 3.0000, 4.5000, 1.5000},
        {5.1000, 3.5000, 1.4000, 0.2000},
        {7.7000, 2.8000, 6.7000, 2.0000},
        {5.8000, 2.7000, 4.1000, 1.0000},
        {5.2000, 3.4000, 1.4000, 0.2000},
        {5.0000, 3.5000, 1.3000, 0.3000},
        {5.1000, 3.8000, 1.9000, 0.4000},
        {5.0000, 2.0000, 3.5000, 1.0000},
        {6.3000, 2.7000, 4.9000, 1.8000},
        {4.8000, 3.4000, 1.9000, 0.2000},
        {5.0000, 3.0000, 1.6000, 0.2000},
        {5.1000, 3.3000, 1.7000, 0.5000},
        {5.6000, 2.7000, 4.2000, 1.3000},
        {5.1000, 3.4000, 1.5000, 0.2000},
        {5.7000, 3.0000, 4.2000, 1.2000},
        {7.7000, 3.8000, 6.7000, 2.2000},
        {4.6000, 3.2000, 1.4000, 0.2000},
        {6.2000, 2.9000, 4.3000, 1.3000},
        {5.7000, 2.5000, 5.0000, 2.0000},
        {5.5000, 4.2000, 1.4000, 0.2000},
        {6.0000, 3.0000, 4.8000, 1.8000},
        {5.8000, 2.7000, 5.1000, 1.9000},
        {6.0000, 2.2000, 4.0000, 1.0000},
        {5.4000, 3.0000, 4.5000, 1.5000},
        {6.2000, 3.4000, 5.4000, 2.3000},
        {5.5000, 2.3000, 4.0000, 1.3000},
        {5.4000, 3.9000, 1.7000, 0.4000},
        {5.0000, 2.3000, 3.3000, 1.0000},
        {6.4000, 2.7000, 5.3000, 1.9000},
        {5.0000, 3.3000, 1.4000, 0.2000},
        {5.0000, 3.2000, 1.2000, 0.2000},
        {5.5000, 2.4000, 3.8000, 1.1000},
        {6.7000, 3.0000, 5.0000, 1.7000},
        {4.9000, 3.1000, 1.5000, 0.2000},
        {5.8000, 2.8000, 5.1000, 2.4000},
        {5.0000, 3.4000, 1.5000, 0.2000},
        {5.0000, 3.5000, 1.6000, 0.6000},
        {5.9000, 3.2000, 4.8000, 1.8000},
        {5.1000, 2.5000, 3.0000, 1.1000},
        {6.9000, 3.2000, 5.7000, 2.3000},
        {6.0000, 2.7000, 5.1000, 1.6000},
        {6.1000, 2.6000, 5.6000, 1.4000},
        {7.7000, 3.0000, 6.1000, 2.3000},
        {5.5000, 2.5000, 4.0000, 1.3000},
        {4.4000, 2.9000, 1.4000, 0.2000},
        {4.3000, 3.0000, 1.1000, 0.1000},
        {6.0000, 2.2000, 5.0000, 1.5000},
        {7.2000, 3.2000, 6.0000, 1.8000},
        {4.6000, 3.1000, 1.5000, 0.2000},
        {5.1000, 3.5000, 1.4000, 0.3000},
        {4.4000, 3.0000, 1.3000, 0.2000},
        {6.3000, 2.5000, 4.9000, 1.5000},
        {6.3000, 3.4000, 5.6000, 2.4000},
        {4.6000, 3.4000, 1.4000, 0.3000},
        {6.8000, 3.0000, 5.5000, 2.1000},
        {6.3000, 3.3000, 6.0000, 2.5000},
        {4.7000, 3.2000, 1.3000, 0.2000},
        {6.1000, 2.9000, 4.7000, 1.4000},
        {6.5000, 2.8000, 4.6000, 1.5000},
        {6.2000, 2.8000, 4.8000, 1.8000},
        {7.0000, 3.2000, 4.7000, 1.4000},
        {6.4000, 3.2000, 5.3000, 2.3000},
        {5.1000, 3.8000, 1.6000, 0.2000},
        {6.9000, 3.1000, 5.4000, 2.1000},
        {5.9000, 3.0000, 4.2000, 1.5000},
        {6.5000, 3.0000, 5.2000, 2.0000},
        {5.7000, 2.6000, 3.5000, 1.0000},
        {5.2000, 2.7000, 3.9000, 1.4000},
        {6.1000, 3.0000, 4.6000, 1.4000},
        {4.5000, 2.3000, 1.3000, 0.3000},
        {6.6000, 2.9000, 4.6000, 1.3000},
        {5.5000, 2.6000, 4.4000, 1.2000},
        {5.3000, 3.7000, 1.5000, 0.2000},
        {5.6000, 3.0000, 4.1000, 1.3000},
        {7.3000, 2.9000, 6.3000, 1.8000},
        {6.7000, 3.3000, 5.7000, 2.1000},
        {5.1000, 3.7000, 1.5000, 0.4000},
        {4.9000, 2.4000, 3.3000, 1.0000},
        {6.7000, 3.3000, 5.7000, 2.5000},
        {7.2000, 3.0000, 5.8000, 1.6000},
        {4.9000, 3.6000, 1.4000, 0.1000},
        {6.7000, 3.1000, 5.6000, 2.4000},
        {4.9000, 3.0000, 1.4000, 0.2000},
        {6.9000, 3.1000, 4.9000, 1.5000},
        {7.4000, 2.8000, 6.1000, 1.9000},
        {6.3000, 2.9000, 5.6000, 1.8000},
        {5.7000, 2.8000, 4.1000, 1.3000},
        {6.5000, 3.0000, 5.5000, 1.8000},
        {6.3000, 2.3000, 4.4000, 1.3000},
        {6.4000, 2.9000, 4.3000, 1.3000},
        {5.6000, 2.8000, 4.9000, 2.0000},
        {5.9000, 3.0000, 5.1000, 1.8000},
        {5.4000, 3.4000, 1.7000, 0.2000},
        {6.1000, 2.8000, 4.0000, 1.3000},
        {4.9000, 2.5000, 4.5000, 1.7000},
        {5.8000, 4.0000, 1.2000, 0.2000},
        {5.8000, 2.6000, 4.0000, 1.2000},
        {7.1000, 3.0000, 5.9000, 2.1000}};

    int train_label[120] = {0 ,0, 1, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 1,
        2, 0, 1, 2, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 0, 1,
        2, 0, 2, 2, 0, 1, 1, 2, 1, 2, 0, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1,
        1, 2, 2, 0, 1, 2, 0, 1, 2};
  
    bool* aa;
    bool* bb;
    bool* cc;
    double summention = 0;

    bool* layer_0[4];
    for(size_t i=0; i<4; i++){
        layer_0[i] = sc.bit_gen(0);
    } 

    bool* layer_1[30];
    for(size_t i=0; i<30; i++){
        layer_1[i] = sc.bit_gen(0);
    } 

    bool* layer_2[3];
    for(size_t i=0; i<5; i++){
        layer_2[i] = sc.bit_gen(0);
    } 

    double _layer_0[4];
    double _layer_1[30];
    double _layer_2[3];

    double store_layer_1[30][10];

    float corr_count = 0;
    float max = 0, max_cand = 0;
    double temp = 0;

    //--------------divide the data by 10.0---------------
    for(unsigned i =0; i < 30; i++){
        for(unsigned j = 0; j < 4; j++){
            x_test[i][j] /= 10.0;
        }
    }

    corr_count = 0;
    for(int k=0; k<30; k++){
        for(int i=0;i<4;i++){
            _layer_0[i] = x_test[k][i];
        }
        for(int i=0;i<30;i++){
            _layer_1[i] = 0.;
        }
        for(int i=0;i<3;i++){
            _layer_2[i] = 0.;
        }


        for(int i=0;i<30;i++){
            for(int j=0;j<4;j++){
                _layer_1[i] += _layer_0[j] * weight_1[i][j];
            }
            // _layer_1[i] /= 4.0;
            store_layer_1[k][i]=_layer_1[i];
            // _layer_1[i] += bias_1[i];
            // _layer_1[i] /= 4.0;
            // _layer_1[i] /= 2.0;
        }
    
        for(int i=0;i<3;i++){
            for(int j=0;j<30;j++){
                _layer_2[i] += _layer_1[j] * weight_2[i][j];
            }
        }
        
        
        
        max = -10000;
        max_cand = 0;

        for(size_t j=0; j<3;j++){
            // cout<<_layer_2[j] << " ";
            if(_layer_2[j] > max){
                max = _layer_2[j];
                max_cand = j;
            }
            // cout << "layer 2[" << j << "] is :" << _layer_2[j] <<endl;
            // cout << "max cand is : " << max_cand << endl;
        }
        // cout<<"\n";
        // cout<<max_cand<<endl;

        if(max_cand == corr_answer[k]){
            corr_count += 1;
            // cout<<"correct!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }
        else{
            // cout<<"wrong!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }

    }
    cout<<"The rate of correctness is: "<<corr_count/30.0<<endl;
    

    
    // //----------------------------------------------------------------------------------
    corr_count = 0;

    for(int k=0; k<30; k++){
        for(int i=0;i<4;i++){
            layer_0[i] = sc.bit_gen(x_test[k][i]);
        }
            
        for(int i=0;i<30;i++){
            layer_1[i] = sc.bit_gen(0);
        }

        for(int i=0;i<3;i++){
            layer_2[i] = sc.bit_gen(0);
        }


        for(int i=0;i<30;i++){
            sum.clear();
            for(int j=0;j<4;j++){
                // layer_1[i] = sc.APC(layer_1[i] ,sc.XNOR(layer_0[j],sc.bit_gen(weight_1[i][j])));
                sum.push_back(sc.XNOR(layer_0[j],sc.bit_gen(weight_1[i][j])));

            }
            layer_1[i] = sc.MUX_general(sum);
        }
    
        for(int i=0;i<3;i++){
            sum.clear();
            for(int j=0;j<30;j++){
                //  layer_2[i] = sc.APC(layer_2[i] ,sc.XNOR(layer_1[j],sc.bit_gen(weight_2[i][j])));
                sum.push_back(sc.XNOR(layer_1[j],sc.bit_gen(weight_2[i][j])));
            }
            // layer_2[i] = sc.MUX_15(sc.XNOR(layer_1[0],sc.bit_gen(weight_2[i][0])),sc.XNOR(layer_1[1],sc.bit_gen(weight_2[i][1])),sc.XNOR(layer_1[2],sc.bit_gen(weight_2[i][2])),sc.XNOR(layer_1[3],sc.bit_gen(weight_2[i][3])),sc.XNOR(layer_1[4],sc.bit_gen(weight_2[i][4])),sc.XNOR(layer_1[5],sc.bit_gen(weight_2[i][5])),sc.XNOR(layer_1[6],sc.bit_gen(weight_2[i][6])),sc.XNOR(layer_1[7],sc.bit_gen(weight_2[i][7])),sc.XNOR(layer_1[8],sc.bit_gen(weight_2[i][8])),sc.XNOR(layer_1[9],sc.bit_gen(weight_2[i][9])),sc.XNOR(layer_1[10],sc.bit_gen(weight_2[i][10])),sc.XNOR(layer_1[11],sc.bit_gen(weight_2[i][11])),sc.XNOR(layer_1[12],sc.bit_gen(weight_2[i][12])),sc.XNOR(layer_1[13],sc.bit_gen(weight_2[i][13])),sc.XNOR(layer_1[14],sc.bit_gen(weight_2[i][14])));  
            // layer_2[i] = sc.MUX(layer_2[i],sc.bit_gen(bias_2[i]));
            layer_2[i] = sc.MUX_general(sum);
            
        }
        
        
        max = -10000;
        max_cand = 0;

        for(size_t j=0; j<3;j++){
            if(sc.print(layer_2[j]) > max){
                max = sc.print(layer_2[j]);
                max_cand = j;
            }
            // cout << "layer 2[" << j << "] is :" << sc.print(layer_2[j]) <<endl;
            // cout << "max cand is : " << max_cand << endl;
        }
        // cout<<max_cand<<endl;

        if(max_cand == corr_answer[k]){
            corr_count += 1;
            // cout<<"correct!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }
        else{
            // cout<<"wrong!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }

    }
    cout<<"The rate of correctness is: "<<corr_count/30.0<<endl;
    
    return 0;
}

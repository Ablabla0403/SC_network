#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include <time.h>
#include <definition.h>
#include <SC.h>

using namespace std;

int main(int argc,char** argv){
    SC sc;
    srand(time(NULL));
    cout<<"program in"<<endl;
    bool all_one[bit_len];
    bool all_zero[bit_len];
    for(int i = 0; i< bit_len; i++){
        all_one[i] = true;
        all_zero[i] = false;
    }
    // ESL w,x,y,z,out1,out2,a;
    // double answer1 = 0,answer2 = 0;
    // x = sc.number_gen(0.3); //error here!!!
    // y = sc.number_gen(0.6);
    // z = sc.number_gen(0.6);
    // w = sc.number_gen(3);
    // cout<<"numnber generated"<<endl;
    // out1 = sc.APC(x,y);
    // out2 = sc.ESL_Multiplier(w,z);
    // a = sc.ESL_Multiplier(out1,out2);

    // cout<<"out1 = "<<sc.print(out1)<<endl;

    double weight_1[5][4] = {{-0.3804129362106323,-0.37114331126213074,0.8303319215774536,0.16184033453464508},
{-0.19719482958316803,0.27227601408958435,-0.2307799756526947,0.5072917342185974},
{-0.04620835930109024,-0.27105242013931274,0.6604450941085815,0.27511030435562134},
{0.48954474925994873,0.5485999584197998,-1.011638879776001,-0.8703153133392334},
{-0.3655585050582886,-0.5698899626731873,-0.10470953583717346,-0.4290408194065094}};
    double bias_1[5] = {-0.6307538747787476,-0.39018914103507996,0.0047127800062298775,0.8436948657035828,-0.22508001327514648};
    double weight_2[3][5] = {{-0.3455176055431366,0.09025055915117264,-0.908238410949707,1.0499064922332764,-0.1953541785478592},
{-0.24558530747890472,-0.8246695399284363,0.3368110954761505,0.4846094846725464,0.13430961966514587},
{0.2632875442504883,-0.01282222755253315,0.09856744110584259,-0.38108205795288086,-0.09605202078819275}};
    double bias_2[3] = {-0.03043883852660656,0.5267519950866699,-0.0069250017404556274};
    
    double x_test[30][4] = {{6.1000, 2.8000, 4.7000, 1.2000},
        {5.7000, 3.8000, 1.7000, 0.3000},
        {7.7000, 2.6000, 6.9000, 2.3000},
        {6.0000, 2.9000, 4.5000, 1.5000},
        {6.8000, 2.8000, 4.8000, 1.4000},
        {5.4000, 3.4000, 1.5000, 0.4000},
        {5.6000, 2.9000, 3.6000, 1.3000},
        {6.9000, 3.1000, 5.1000, 2.3000},
        {6.2000, 2.2000, 4.5000, 1.5000},
        {5.8000, 2.7000, 3.9000, 1.2000},
        {6.5000, 3.2000, 5.1000, 2.0000},
        {4.8000, 3.0000, 1.4000, 0.1000},
        {5.5000, 3.5000, 1.3000, 0.2000},
        {4.9000, 3.1000, 1.5000, 0.1000},
        {5.1000, 3.8000, 1.5000, 0.3000},
        {6.3000, 3.3000, 4.7000, 1.6000},
        {6.5000, 3.0000, 5.8000, 2.2000},
        {5.6000, 2.5000, 3.9000, 1.1000},
        {5.7000, 2.8000, 4.5000, 1.3000},
        {6.4000, 2.8000, 5.6000, 2.2000},
        {4.7000, 3.2000, 1.6000, 0.2000},
        {6.1000, 3.0000, 4.9000, 1.8000},
        {5.0000, 3.4000, 1.6000, 0.4000},
        {6.4000, 2.8000, 5.6000, 2.1000},
        {7.9000, 3.8000, 6.4000, 2.0000},
        {6.7000, 3.0000, 5.2000, 2.3000},
        {6.7000, 2.5000, 5.8000, 1.8000},
        {6.8000, 3.2000, 5.9000, 2.3000},
        {4.8000, 3.0000, 1.4000, 0.3000},
        {4.8000, 3.1000, 1.6000, 0.2000}};
    float corr_answer[30] = {1, 0, 2, 1, 1, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 0, 2, 0, 2,
        2, 2, 2, 2, 0, 0};
    
    double train_data[120][4] {{4.6000, 3.6000, 1.0000, 0.2000},
        {5.7000, 4.4000, 1.5000, 0.4000},
        {6.7000, 3.1000, 4.4000, 1.4000},
        {4.8000, 3.4000, 1.6000, 0.2000},
        {4.4000, 3.2000, 1.3000, 0.2000},
        {6.3000, 2.5000, 5.0000, 1.9000},
        {6.4000, 3.2000, 4.5000, 1.5000},
        {5.2000, 3.5000, 1.5000, 0.2000},
        {5.0000, 3.6000, 1.4000, 0.2000},
        {5.2000, 4.1000, 1.5000, 0.1000},
        {5.8000, 2.7000, 5.1000, 1.9000},
        {6.0000, 3.4000, 4.5000, 1.6000},
        {6.7000, 3.1000, 4.7000, 1.5000},
        {5.4000, 3.9000, 1.3000, 0.4000},
        {5.4000, 3.7000, 1.5000, 0.2000},
        {5.5000, 2.4000, 3.7000, 1.0000},
        {6.3000, 2.8000, 5.1000, 1.5000},
        {6.4000, 3.1000, 5.5000, 1.8000},
        {6.6000, 3.0000, 4.4000, 1.4000},
        {7.2000, 3.6000, 6.1000, 2.5000},
        {5.7000, 2.9000, 4.2000, 1.3000},
        {7.6000, 3.0000, 6.6000, 2.1000},
        {5.6000, 3.0000, 4.5000, 1.5000},
        {5.1000, 3.5000, 1.4000, 0.2000},
        {7.7000, 2.8000, 6.7000, 2.0000},
        {5.8000, 2.7000, 4.1000, 1.0000},
        {5.2000, 3.4000, 1.4000, 0.2000},
        {5.0000, 3.5000, 1.3000, 0.3000},
        {5.1000, 3.8000, 1.9000, 0.4000},
        {5.0000, 2.0000, 3.5000, 1.0000},
        {6.3000, 2.7000, 4.9000, 1.8000},
        {4.8000, 3.4000, 1.9000, 0.2000},
        {5.0000, 3.0000, 1.6000, 0.2000},
        {5.1000, 3.3000, 1.7000, 0.5000},
        {5.6000, 2.7000, 4.2000, 1.3000},
        {5.1000, 3.4000, 1.5000, 0.2000},
        {5.7000, 3.0000, 4.2000, 1.2000},
        {7.7000, 3.8000, 6.7000, 2.2000},
        {4.6000, 3.2000, 1.4000, 0.2000},
        {6.2000, 2.9000, 4.3000, 1.3000},
        {5.7000, 2.5000, 5.0000, 2.0000},
        {5.5000, 4.2000, 1.4000, 0.2000},
        {6.0000, 3.0000, 4.8000, 1.8000},
        {5.8000, 2.7000, 5.1000, 1.9000},
        {6.0000, 2.2000, 4.0000, 1.0000},
        {5.4000, 3.0000, 4.5000, 1.5000},
        {6.2000, 3.4000, 5.4000, 2.3000},
        {5.5000, 2.3000, 4.0000, 1.3000},
        {5.4000, 3.9000, 1.7000, 0.4000},
        {5.0000, 2.3000, 3.3000, 1.0000},
        {6.4000, 2.7000, 5.3000, 1.9000},
        {5.0000, 3.3000, 1.4000, 0.2000},
        {5.0000, 3.2000, 1.2000, 0.2000},
        {5.5000, 2.4000, 3.8000, 1.1000},
        {6.7000, 3.0000, 5.0000, 1.7000},
        {4.9000, 3.1000, 1.5000, 0.2000},
        {5.8000, 2.8000, 5.1000, 2.4000},
        {5.0000, 3.4000, 1.5000, 0.2000},
        {5.0000, 3.5000, 1.6000, 0.6000},
        {5.9000, 3.2000, 4.8000, 1.8000},
        {5.1000, 2.5000, 3.0000, 1.1000},
        {6.9000, 3.2000, 5.7000, 2.3000},
        {6.0000, 2.7000, 5.1000, 1.6000},
        {6.1000, 2.6000, 5.6000, 1.4000},
        {7.7000, 3.0000, 6.1000, 2.3000},
        {5.5000, 2.5000, 4.0000, 1.3000},
        {4.4000, 2.9000, 1.4000, 0.2000},
        {4.3000, 3.0000, 1.1000, 0.1000},
        {6.0000, 2.2000, 5.0000, 1.5000},
        {7.2000, 3.2000, 6.0000, 1.8000},
        {4.6000, 3.1000, 1.5000, 0.2000},
        {5.1000, 3.5000, 1.4000, 0.3000},
        {4.4000, 3.0000, 1.3000, 0.2000},
        {6.3000, 2.5000, 4.9000, 1.5000},
        {6.3000, 3.4000, 5.6000, 2.4000},
        {4.6000, 3.4000, 1.4000, 0.3000},
        {6.8000, 3.0000, 5.5000, 2.1000},
        {6.3000, 3.3000, 6.0000, 2.5000},
        {4.7000, 3.2000, 1.3000, 0.2000},
        {6.1000, 2.9000, 4.7000, 1.4000},
        {6.5000, 2.8000, 4.6000, 1.5000},
        {6.2000, 2.8000, 4.8000, 1.8000},
        {7.0000, 3.2000, 4.7000, 1.4000},
        {6.4000, 3.2000, 5.3000, 2.3000},
        {5.1000, 3.8000, 1.6000, 0.2000},
        {6.9000, 3.1000, 5.4000, 2.1000},
        {5.9000, 3.0000, 4.2000, 1.5000},
        {6.5000, 3.0000, 5.2000, 2.0000},
        {5.7000, 2.6000, 3.5000, 1.0000},
        {5.2000, 2.7000, 3.9000, 1.4000},
        {6.1000, 3.0000, 4.6000, 1.4000},
        {4.5000, 2.3000, 1.3000, 0.3000},
        {6.6000, 2.9000, 4.6000, 1.3000},
        {5.5000, 2.6000, 4.4000, 1.2000},
        {5.3000, 3.7000, 1.5000, 0.2000},
        {5.6000, 3.0000, 4.1000, 1.3000},
        {7.3000, 2.9000, 6.3000, 1.8000},
        {6.7000, 3.3000, 5.7000, 2.1000},
        {5.1000, 3.7000, 1.5000, 0.4000},
        {4.9000, 2.4000, 3.3000, 1.0000},
        {6.7000, 3.3000, 5.7000, 2.5000},
        {7.2000, 3.0000, 5.8000, 1.6000},
        {4.9000, 3.6000, 1.4000, 0.1000},
        {6.7000, 3.1000, 5.6000, 2.4000},
        {4.9000, 3.0000, 1.4000, 0.2000},
        {6.9000, 3.1000, 4.9000, 1.5000},
        {7.4000, 2.8000, 6.1000, 1.9000},
        {6.3000, 2.9000, 5.6000, 1.8000},
        {5.7000, 2.8000, 4.1000, 1.3000},
        {6.5000, 3.0000, 5.5000, 1.8000},
        {6.3000, 2.3000, 4.4000, 1.3000},
        {6.4000, 2.9000, 4.3000, 1.3000},
        {5.6000, 2.8000, 4.9000, 2.0000},
        {5.9000, 3.0000, 5.1000, 1.8000},
        {5.4000, 3.4000, 1.7000, 0.2000},
        {6.1000, 2.8000, 4.0000, 1.3000},
        {4.9000, 2.5000, 4.5000, 1.7000},
        {5.8000, 4.0000, 1.2000, 0.2000},
        {5.8000, 2.6000, 4.0000, 1.2000},
        {7.1000, 3.0000, 5.9000, 2.1000}};

    int train_label[120] = {0 ,0, 1, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 1,
        2, 0, 1, 2, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 0, 1,
        2, 0, 2, 2, 0, 1, 1, 2, 1, 2, 0, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1,
        1, 2, 2, 0, 1, 2, 0, 1, 2};
  
    bool* aa;
    bool* bb;
    bool* cc;
    double summention = 0;
    for(int i = 0;i < 10000; i++){
        double r1 = (double)rand() / (RAND_MAX + 1.0);
        aa = sc.bit_gen(2.0*r1-1);
        double r2 = (double)rand() / (RAND_MAX + 1.0);
        bb = sc.bit_gen(2.0*r2-1);
        cc = sc.MUX(aa,bb);
        summention += abs(sc.print(cc) - (r1 + r2) / 2.0);
    }
    cout<<"error = "<<summention/10000.0<<endl;

    ESL layer_0[4];
    for(size_t i=0; i<4; i++){
        layer_0[i] = sc.number_gen(0);
    } 

    ESL layer_1[10];
    for(size_t i=0; i<10; i++){
        layer_1[i] = sc.number_gen(0);
    } 

    ESL layer_2[3];
    for(size_t i=0; i<5; i++){
        layer_2[i] = sc.number_gen(0);
    } 

    double _layer_0[4];
    double _layer_1[10];
    double _layer_2[3];

    double store_layer_1[30][10];

    float corr_count = 0;
    float max = 0, max_cand = 0;
    double temp = 0;

    //-----------------------------
    corr_count = 0;
    for(int k=0; k<30; k++){
        for(int i=0;i<4;i++){
            _layer_0[i] = x_test[k][i];
        }
        for(int i=0;i<5;i++){
            _layer_1[i] = 0;
        }
        for(int i=0;i<3;i++){
            _layer_2[i] = 0;
        }


        for(int i=0;i<5;i++){
            for(int j=0;j<4;j++){
                _layer_1[i] += _layer_0[j] * weight_1[i][j];
            }
            store_layer_1[k][i]=_layer_1[i];
            _layer_1[i] += bias_1[i];
        }
    
        for(int i=0;i<3;i++){
            for(int j=0;j<5;j++){
                _layer_2[i] += _layer_1[j] * weight_2[i][j];
            }
            _layer_2[i] += bias_2[i];
        }
        
        
        
        max = -10000;
        max_cand = 0;

        for(size_t j=0; j<3;j++){
            if(_layer_2[j] > max){
                max = _layer_2[j];
                max_cand = j;
            }
            // cout << "layer 2[" << j << "] is :" << _layer_2[j] <<endl;
            // cout << "max cand is : " << max_cand << endl;
        }
        // cout<<max_cand<<endl;

        if(max_cand == corr_answer[k]){
            corr_count += 1;
            // cout<<"correct!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }
        else{
            // cout<<"wrong!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }

    }
    cout<<"The rate of correctness is: "<<corr_count/30.0<<endl;
    
    //----------------------------------------------------------------------------------
    corr_count = 0;

    for(int k=0; k<30; k++){
        for(int i=0;i<4;i++){
            layer_0[i] = sc.number_gen(x_test[k][i]);
        }
            
        for(int i=0;i<5;i++){
            layer_1[i] = sc.number_gen(0);
        }

        for(int i=0;i<3;i++){
            layer_2[i] = sc.number_gen(0);
        }


        for(int i=0;i<5;i++){
            // for(int j=0;j<4;j++){
            //     layer_1[i] = sc.NEW_APC(layer_1[i] ,sc.ESL_Multiplier(layer_0[j],sc.number_gen(weight_1[i][j])));
            // }
            layer_1[i] = sc.ESL_Adder_4(sc.ESL_Multiplier(layer_0[0],sc.number_gen(weight_1[i][0])),sc.ESL_Multiplier(layer_0[1],sc.number_gen(weight_1[i][1])),sc.ESL_Multiplier(layer_0[2],sc.number_gen(weight_1[i][2])),sc.ESL_Multiplier(layer_0[3],sc.number_gen(weight_1[i][3])));
            // cout<<abs((store_layer_1[k][i]-sc.print(layer_2[i])))<<endl;
            layer_1[i] = sc.ESL_Adder(layer_1[i],sc.number_gen(bias_1[i]));
        }
    
        for(int i=0;i<3;i++){
            for(int j=0;j<5;j++){
                layer_2[i] = sc.ESL_Adder_5(sc.ESL_Multiplier(layer_1[0],sc.number_gen(weight_2[i][0])),sc.ESL_Multiplier(layer_1[1],sc.number_gen(weight_2[i][1])),sc.ESL_Multiplier(layer_1[2],sc.number_gen(weight_2[i][2])),sc.ESL_Multiplier(layer_1[3],sc.number_gen(weight_2[i][3])),sc.ESL_Multiplier(layer_1[4],sc.number_gen(weight_2[i][4])));
                
            }
            layer_2[i] = sc.ESL_Adder(layer_2[i],sc.number_gen(bias_2[i]));
            
        }
        
        
        max = -10000;
        max_cand = 0;

        for(size_t j=0; j<3;j++){
            if(sc.print(layer_2[j]) > max){
                max = sc.print(layer_2[j]);
                max_cand = j;
            }
            // cout << "layer 2[" << j << "] is :" << sc.print(layer_2[j]) <<endl;
            // cout << "max cand is : " << max_cand << endl;
        }
        // cout<<max_cand<<endl;

        if(max_cand == corr_answer[k]){
            corr_count += 1;
            // cout<<"correct!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }
        else{
            // cout<<"wrong!!!!!("<<corr_count<<'/'<<k+1<<')'<<endl;
        }

    }
    cout<<"The rate of correctness is: "<<corr_count/30.0<<endl;
    
    return 0;
}


// tensor([-0.9631,  0.6938,  0.6123])
// tensor([ 1.3399, -0.0262, -1.3113])
// tensor([-3.1469,  1.3521,  2.4407])
// tensor([-0.9443,  0.6709,  0.5969])
// tensor([-1.3235,  0.7936,  0.9166])
// tensor([ 1.4078, -0.0593, -1.3668])
// tensor([-0.2611,  0.4521,  0.0265])
// tensor([-1.8589,  0.9253,  1.3640])
// tensor([-1.1522,  0.7259,  0.7746])
// tensor([-0.4751,  0.5261,  0.2059])
// tensor([-1.5770,  0.8561,  1.1257])
// tensor([ 1.6994, -0.1383, -1.6117])
// tensor([ 1.5930, -0.1107, -1.5214])
// tensor([ 1.6373, -0.1163, -1.5601])
// tensor([ 1.6299, -0.1167, -1.5557])
// tensor([-1.1036,  0.7226,  0.7291])
// tensor([-2.0739,  1.0130,  1.5401])
// tensor([-0.4091,  0.5094,  0.1506])
// tensor([-0.7808,  0.6306,  0.4590])
// tensor([-1.9807,  0.9781,  1.4632])
// tensor([ 1.6225, -0.1120, -1.5491])
// tensor([-1.2994,  0.7756,  0.8930])
// tensor([ 1.4799, -0.0770, -1.4291])
// tensor([-1.9350,  0.9688,  1.4249])
// tensor([-2.5619,  1.1876,  1.9482])
// tensor([-1.8697,  0.9308,  1.3723])
// tensor([-2.0575,  1.0202,  1.5287])
// tensor([-2.2229,  1.0570,  1.6650])
// tensor([ 1.6081, -0.1197, -1.5350])
// tensor([ 1.5707, -0.0978, -1.5049])